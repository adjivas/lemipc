initSidebarItems({"macro":[["exit!","The `exit` macro leaves the program."],["ftok!","The `ftok` macro returns the System-V'IPC key from pathname."],["getpid!","The `getpid` macro returns the PID of program."],["ipc_getlem!","The `ipc_getlem` returns and inits the tuple (msg, sem, shm)."],["kill!","The `signal` macro sends a signal to a PID program."],["msgctl!","The `msgclr` macro returns a information according the argument command."],["msgget!","The `msgget` macro returns identifiant of XSI message queue."],["msgrcv!","The `msgrcv` macro recuperates a new message according to $from variable."],["msgsnd!","The `msgsnd` macro sends a new message to the XSI queue."],["read!","The `read` macro reads the input and returns None or the Some of thetuple (len, text)."],["read_character!","The `read_character` macro reads and returns one character."],["read_command!","The `read_command` macro reads and returns the concat of all letter."],["read_number!","The `read_number` macro reads and returns the number."],["semctl!","The `semctl` macro configures the semaphore index."],["semctl_clear!","The `semctl_clear` macro removes the goup of semaphores."],["semctl_init!","The `semctl_init` macro sets/inits the semaphore at 0."],["semget!","The `semget` macro obtains a semaphore id."],["semget_id!","The `semget_id` macro obtains a semaphore id and determinates the required flag."],["semop!","The `semop` macro sets the semaphore index according to a SemBuffer."],["semop_lock!","The `semop_lock` macro locks the semaphore."],["semop_unlock!","The `semop_lock` macro unlocks the semaphore."],["shm_getboard!","The `shm_getboard` returns the shared board, and create the shared board if necessary."],["shm_getboard_if_created!","The `shm_getboard_if_created` returns the shared board if exist."],["shmat!","The `shmat` macro returns the fist memory address."],["shmctl!","The `shmctl` sets a information on the segment."],["shmdt!","The `shmdt` macro detaches the shared memory from the memory address."],["shmget!","The `shmget` macro returns the id of a memory segment."],["shmget_id!","The `shmget_id` returns and creates or gets the memory segment."],["signal!","The `signal` macro receives a signal to a PID program."],["write!","The `write` macro writes to output the text and returns the Some 0i32 or None according to success."],["write_character!","The `write_character` macro writes to output the character and returns the Some 0i32 or None according to success."],["write_number!","The `write_number` macro writes to output the number and returns the Some 0i32 or None according to success."],["writeln!","The `writeln` macro writes to output the text with a breakline and returns the Some 0i32 or None according to success."],["writeln_number!","The `writeln_number` macro writes to output the number with a breakline and returns the Some 0i32 or None according to success."]],"mod":[["board",""],["command",""],["ffi",""],["io",""],["msg",""],["sem",""],["shm",""],["sig",""]]});