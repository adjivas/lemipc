var searchIndex = {};
searchIndex['lemipc'] = {"items":[[0,"","lemipc","",null,null],[0,"shm","","",null,null],[0,"sem","","",null,null],[0,"msg","","",null,null],[0,"sig","","",null,null],[0,"io","","",null,null],[0,"board","","",null,null],[3,"Map","lemipc::board","The `Map` structure defines the grid and the score.",null,null],[4,"Cell","","",null,null],[13,"Empty","","",0,null],[13,"Pawn","","",0,null],[11,"get","","The `get` function returns the (pid, team) cell.",1,{"inputs":[{"name":"map"},{"name":"usize"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_pid","","The `get_pid` function returns the pid cell.",1,{"inputs":[{"name":"map"},{"name":"usize"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_score","","The `get_score` function returns the score.",1,null],[11,"get_turn","","The `get_turn` function returns who must play.",1,{"inputs":[{"name":"map"}],"output":{"name":"i32"}}],[11,"set","","The `set` function writes the value at [X; Y] cell.",1,{"inputs":[{"name":"map"},{"name":"usize"},{"name":"usize"},{"name":"i32"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"unset","","The `unset` function writes the value at [X; Y] cell.",1,{"inputs":[{"name":"map"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"play_pawn","","The `play_pawn` function moves the pawn.",1,{"inputs":[{"name":"map"},{"name":"i32"},{"name":"compass"}],"output":{"name":"result"}}],[11,"spawn_pawn","","The `spawn_pawn` function spawns a new pawn.",1,{"inputs":[{"name":"map"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"dead_pawn","","The `dead_pawn` function removes a pawn\nand updates the turn of next pawn.",1,{"inputs":[{"name":"map"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"count_enemy","","The `count_enemy` function returns the\nnumber of enemy around one pawn.",1,{"inputs":[{"name":"map"},{"name":"i32"}],"output":{"name":"option"}}],[11,"found_team","","The `found_team` returns the team\nof pawn according to pid.",1,{"inputs":[{"name":"map"},{"name":"i32"}],"output":{"name":"option"}}],[11,"len_pawn","","The `len_pawn` counts the number of pawn.",1,{"inputs":[{"name":"map"}],"output":{"name":"usize"}}],[11,"put_grid_team","","The `put_grid_team` prints the grid\nwith a limited vision of team.",1,{"inputs":[{"name":"map"},{"name":"i32"}],"output":null}],[11,"default","","The `default` constructor function returns\na empty map.",1,{"inputs":[{"name":"map"}],"output":{"name":"self"}}],[11,"clone","","",0,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",0,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",0,{"inputs":[{"name":"cell"}],"output":{"name":"option"}}],[11,"get_pid","","",0,{"inputs":[{"name":"cell"}],"output":{"name":"option"}}],[11,"get_team","","",0,{"inputs":[{"name":"cell"}],"output":{"name":"option"}}],[11,"set","","",0,{"inputs":[{"name":"cell"},{"name":"i32"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"unset","","",0,{"inputs":[{"name":"cell"}],"output":{"name":"bool"}}],[11,"default","","",0,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[0,"command","lemipc","",null,null],[4,"Compass","lemipc::command","IPC - compass help",null,null],[13,"NORTH","","",2,null],[13,"EAST","","",2,null],[13,"SOUTH","","",2,null],[13,"WEST","","",2,null],[5,"start","","The `start` function prints the first message of game.",null,{"inputs":[{"name":"map"},{"name":"i32"}],"output":null}],[5,"turn","","The `turn` function informs the user who must play.",null,{"inputs":[{"name":"map"}],"output":null}],[5,"play","","The `play` function checks if the user can play,\nif yes the pawn is moved.",null,{"inputs":[{"name":"map"},{"name":"i32"}],"output":null}],[5,"email","","The `email` function sends a message.",null,{"inputs":[{"name":"i32"}],"output":null}],[5,"receive","","The `receive` function takes and prints the last message.",null,{"inputs":[{"name":"i32"}],"output":null}],[5,"map","","The `map` function prints the map according to\nthe team of pid.",null,{"inputs":[{"name":"map"},{"name":"i32"}],"output":null}],[5,"cheat","","The `cheat` function prints all the map.",null,{"inputs":[{"name":"map"}],"output":null}],[5,"whoiam","","The `whoiam` function prints the pid.",null,{"inputs":[{"name":"i32"}],"output":null}],[5,"score","","The `score` function prints the result of team.",null,{"inputs":[{"name":"map"}],"output":null}],[5,"help","","The `help` function prints all commands of game.",null,{"inputs":[{"name":"i32"}],"output":null}],[5,"quit","","Dead dead dead !",null,{"inputs":[{"name":"i32"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"compass"}],"output":{"name":"compass"}}],[11,"eq","","",2,{"inputs":[{"name":"compass"},{"name":"compass"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"compass"},{"name":"compass"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"compass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","The `new` constructor function retuns\nthe compass direction.",2,{"inputs":[{"name":"compass"},{"name":"i8"}],"output":{"name":"option"}}],[0,"ffi","lemipc","",null,null],[5,"_exit","lemipc::ffi","",null,null],[14,"ftok!","lemipc","The `ftok` macro returns the System-V'IPC\nkey from pathname.",null,null],[14,"shmget!","","The `shmget` macro returns the id of\na memory segment.",null,null],[14,"shmget_id!","","The `shmget_id` returns and creates or gets\nthe memory segment.",null,null],[14,"shmat!","","The `shmat` macro returns the fist memory address.",null,null],[14,"shmdt!","","The `shmdt` macro detaches the shared memory\nfrom the memory address.",null,null],[14,"shmctl!","","The `shmctl` sets a information on the segment.",null,null],[14,"semget!","","The `semget` macro obtains a semaphore id.",null,null],[14,"semget_id!","","The `semget_id` macro obtains a semaphore id\nand determinates the required flag.",null,null],[14,"semop!","","The `semop` macro sets the semaphore\nindex according to a SemBuffer.",null,null],[14,"semop_lock!","","The `semop_lock` macro locks the semaphore.",null,null],[14,"semop_unlock!","","The `semop_lock` macro unlocks the semaphore.",null,null],[14,"semctl!","","The `semctl` macro configures the semaphore index.",null,null],[14,"semctl_init!","","The `semctl_init` macro sets/inits the semaphore at 0.",null,null],[14,"semctl_clear!","","The `semctl_clear` macro removes the goup of semaphores.",null,null],[14,"msgget!","","The `msgget` macro returns identifiant of\nXSI message queue.",null,null],[14,"msgsnd!","","The `msgsnd` macro sends a new message\nto the XSI queue.",null,null],[14,"msgrcv!","","The `msgrcv` macro recuperates a new message\naccording to $from variable.",null,null],[14,"msgctl!","","The `msgclr` macro returns a information\naccording the argument command.",null,null],[14,"getpid!","","The `getpid` macro returns the PID of\nprogram.",null,null],[14,"signal!","","The `signal` macro receives a signal to\na PID program.",null,null],[14,"kill!","","The `signal` macro sends a signal to\na PID program.",null,null],[14,"write!","","The `write` macro writes to output the text\nand returns the Some 0i32 or None according to success.",null,null],[14,"writeln!","","The `writeln` macro writes to output the text with a breakline\nand returns the Some 0i32 or None according to success.",null,null],[14,"write_number!","","The `write_number` macro writes to output the number\nand returns the Some 0i32 or None according to success.",null,null],[14,"writeln_number!","","The `writeln_number` macro writes to output the number with a breakline\nand returns the Some 0i32 or None according to success.",null,null],[14,"write_character!","","The `write_character` macro writes to output the character\nand returns the Some 0i32 or None according to success.",null,null],[14,"read!","","The `read` macro reads the input and returns None\nor the Some of thetuple (len, text).",null,null],[14,"read_character!","","The `read_character` macro reads and\nreturns one character.",null,null],[14,"read_number!","","The `read_number` macro reads and\nreturns the number.",null,null],[14,"read_command!","","The `read_command` macro reads and\nreturns the concat of all letter.",null,null],[14,"exit!","","The `exit` macro leaves the program.",null,null],[14,"shm_getboard!","","The `shm_getboard` returns the shared board,\nand create the shared board if necessary.",null,null],[14,"shm_getboard_if_created!","","The `shm_getboard_if_created` returns the shared board\nif exist.",null,null],[14,"ipc_getlem!","","The `ipc_getlem` returns and inits the tuple (msg, sem, shm).",null,null]],"paths":[[4,"Cell"],[3,"Map"],[4,"Compass"]]};
searchIndex['msg'] = {"items":[[0,"","msg","",null,null],[0,"ffi","","",null,null],[3,"MsgBuf","msg::ffi","The `MsgBuf` struct is a structure required\nby `msgsnd` and `msgrcv` functions.",null,null],[12,"mtype","","",0,null],[12,"mtext","","",0,null],[3,"MsqidDs","","The `MsqidDs` struct is a structure required\nby `msgsnd` and `msgrcv` functions.",null,null],[3,"IpcPerm","","",null,null],[12,"uid","","",1,null],[12,"gid","","",1,null],[12,"cuid","","",1,null],[12,"cgid","","",1,null],[12,"mode","","",1,null],[12,"seq","","",1,null],[12,"key","","",1,null],[4,"Ipc","","The `Ipc` enum is a POSIX Standard\nfor System V.",null,null],[13,"CREAT","","",2,null],[13,"NOWAIT","","",2,null],[13,"EXCL","","",2,null],[13,"RMID","","",2,null],[13,"SET","","",2,null],[13,"STAT","","",2,null],[13,"INFO","","",2,null],[5,"ftok","","",null,null],[5,"msgget","","",null,null],[5,"msgsnd","","",null,null],[5,"msgrcv","","",null,null],[5,"msgctl","","",null,null],[17,"TOK_PATHNAME","","The `TOK_*, MSG_BUFF` const are default values\nfor macros.",null,null],[17,"TOK_PROJ_ID","","",null,null],[17,"MSG_BUFF","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"ipc"}],"output":{"name":"ipc"}}],[14,"ftok!","msg","The `ftok` macro returns the System-V'IPC\nkey from pathname.",null,null],[14,"msgget!","","The `msgget` macro returns identifiant of\nXSI message queue.",null,null],[14,"msgsnd!","","The `msgsnd` macro sends a new message\nto the XSI queue.",null,null],[14,"msgrcv!","","The `msgrcv` macro recuperates a new message\naccording to $from variable.",null,null],[14,"msgctl!","","The `msgclr` macro returns a information\naccording the argument command.",null,null]],"paths":[[3,"MsgBuf"],[3,"IpcPerm"],[4,"Ipc"]]};
searchIndex['sem'] = {"items":[[0,"","sem","",null,null],[0,"ffi","","",null,null],[3,"SemBuf","sem::ffi","",null,null],[12,"sem_num","","",0,null],[12,"sem_op","","",0,null],[12,"sem_flg","","",0,null],[3,"SemUn","","",null,null],[12,"val","","",1,null],[12,"buf","","",1,null],[12,"array","","",1,null],[3,"SemIdDs","","",null,null],[12,"sem_perm","","",2,null],[12,"sem_otime","","",2,null],[12,"sem_ctime","","",2,null],[12,"sem_nsems","","",2,null],[3,"IpcPerm","","",null,null],[12,"key","","",3,null],[12,"uid","","",3,null],[12,"gid","","",3,null],[12,"cuid","","",3,null],[12,"cgid","","",3,null],[12,"mode","","",3,null],[12,"seq","","",3,null],[4,"Ipc","","The `Ipc` enum is a POSIX Standard\nfor System V.",null,null],[13,"CREAT","","",4,null],[13,"NOWAIT","","",4,null],[13,"EXCL","","",4,null],[13,"RMID","","",4,null],[13,"SET","","",4,null],[13,"STAT","","",4,null],[13,"INFO","","",4,null],[4,"Sem","","",null,null],[13,"GETPID","","",5,null],[13,"GETVAL","","",5,null],[13,"GETALL","","",5,null],[13,"GETZCNT","","",5,null],[13,"SETVAL","","",5,null],[13,"SETALL","","",5,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[17,"TOK_PATHNAME","","The `TOK_*` const are default values\nfor macros.",null,null],[17,"TOK_PROJ_ID","","",null,null],[17,"SEM_NUM","","",null,null],[17,"NSEMS","","",null,null],[17,"NSOPS","","",null,null],[11,"clone","","",4,{"inputs":[{"name":"ipc"}],"output":{"name":"ipc"}}],[11,"clone","","",5,{"inputs":[{"name":"sem"}],"output":{"name":"sem"}}],[14,"ftok!","sem","The `ftok` macro returns the System-V'IPC\nkey from pathname.",null,null],[14,"semget!","","The `semget` macro obtains a semaphore id.",null,null],[14,"semget_id!","","The `semget_id` macro obtains a semaphore id\nand determinates the required flag.",null,null],[14,"semop!","","The `semop` macro sets the semaphore\nindex according to a SemBuffer.",null,null],[14,"semop_lock!","","The `semop_lock` macro locks the semaphore.",null,null],[14,"semop_unlock!","","The `semop_lock` macro unlocks the semaphore.",null,null],[14,"semctl!","","The `semctl` macro configures the semaphore index.",null,null],[14,"semctl_init!","","The `semctl_init` macro sets/inits the semaphore at 0.",null,null],[14,"semctl_clear!","","The `semctl_clear` macro removes the goup of semaphores.",null,null]],"paths":[[3,"SemBuf"],[3,"SemUn"],[3,"SemIdDs"],[3,"IpcPerm"],[4,"Ipc"],[4,"Sem"]]};
searchIndex['io'] = {"items":[[0,"","io","",null,null],[0,"ffi","","",null,null],[3,"Termios","io::ffi","",null,null],[12,"c_iflag","","",0,null],[12,"c_oflag","","",0,null],[12,"c_cflag","","",0,null],[12,"c_lflag","","",0,null],[12,"c_line","","",0,null],[12,"c_cc","","",0,null],[12,"c_ispeed","","",0,null],[12,"c_ospeed","","",0,null],[4,"ControlCharacter","","All the `const *` are default values\nof c_cc.",null,null],[13,"VINTR","","",1,null],[13,"VQUIT","","",1,null],[13,"VERASE","","",1,null],[13,"VKILL","","",1,null],[13,"VEOF","","",1,null],[13,"VTIME","","",1,null],[13,"VMIN","","",1,null],[13,"VSWTC","","",1,null],[13,"VSTART","","",1,null],[13,"VSTOP","","",1,null],[13,"VSUSP","","",1,null],[13,"VEOL","","",1,null],[13,"VREPRINT","","",1,null],[13,"VDISCARD","","",1,null],[13,"VWERASE","","",1,null],[13,"VLNEXT","","",1,null],[13,"VEOL2","","",1,null],[4,"InputModes","","All the `const *` are default values\nof c_iflag.",null,null],[13,"IGNBRK","","",2,null],[13,"BRKINT","","",2,null],[13,"IGNPAR","","",2,null],[13,"PARMRK","","",2,null],[13,"INPCK","","",2,null],[13,"ISTRIP","","",2,null],[13,"INLCR","","",2,null],[13,"IGNCR","","",2,null],[13,"ICRNL","","",2,null],[13,"IUCLC","","",2,null],[13,"IXON","","",2,null],[13,"IXANY","","",2,null],[13,"IXOFF","","",2,null],[13,"IMAXBEL","","",2,null],[13,"IUTF8","","",2,null],[4,"OutputModes","","All the `const *` are default values\nof c_oflag.",null,null],[13,"OPOST","","",3,null],[13,"OLCUC","","",3,null],[13,"ONLCR","","",3,null],[13,"OCRNL","","",3,null],[13,"ONOCR","","",3,null],[13,"ONLRET","","",3,null],[13,"OFILL","","",3,null],[13,"OFDEL","","",3,null],[13,"VT0","","",3,null],[13,"VT1","","",3,null],[4,"Speed","","All the `const *` are default values\nof c_cflag.",null,null],[13,"B0","","",4,null],[13,"B50","","",4,null],[13,"B75","","",4,null],[13,"B110","","",4,null],[13,"B134","","",4,null],[13,"B150","","",4,null],[13,"B200","","",4,null],[13,"B300","","",4,null],[13,"B600","","",4,null],[13,"B1200","","",4,null],[13,"B1800","","",4,null],[13,"B2400","","",4,null],[13,"B4800","","",4,null],[13,"B9600","","",4,null],[13,"B19200","","",4,null],[13,"B38400","","",4,null],[13,"B57600","","",4,null],[13,"B115200","","",4,null],[13,"B230400","","",4,null],[13,"B460800","","",4,null],[13,"B500000","","",4,null],[13,"B576000","","",4,null],[13,"B921600","","",4,null],[13,"B1000000","","",4,null],[13,"B1152000","","",4,null],[13,"B1500000","","",4,null],[13,"B2000000","","",4,null],[13,"B2500000","","",4,null],[13,"B3000000","","",4,null],[13,"B3500000","","",4,null],[13,"B4000000","","",4,null],[4,"LocalModes","","All the `const *` are default values\nof c_lflag.",null,null],[13,"ECHO","","",5,null],[13,"ECHOE","","",5,null],[13,"ECHOK","","",5,null],[13,"ECHONL","","",5,null],[13,"NOFLSH","","",5,null],[13,"TOSTOP","","",5,null],[13,"ISIG","","",5,null],[13,"ICANON","","",5,null],[4,"TermiosControl","","",null,null],[13,"GETS","","",6,null],[13,"SETS","","",6,null],[13,"SETSW","","",6,null],[13,"SETSF","","",6,null],[13,"GETA","","",6,null],[13,"SETA","","",6,null],[13,"SETAW","","",6,null],[13,"SETAF","","",6,null],[13,"SBRK","","",6,null],[13,"XONC","","",6,null],[13,"FLSH","","",6,null],[4,"Seek","","",null,null],[13,"SET","","",7,null],[13,"CUR","","",7,null],[13,"END","","",7,null],[5,"write","","",null,null],[5,"lseek","","",null,null],[5,"read","","",null,null],[5,"ioctl","","",null,null],[17,"NCCS","","The `NCCS` const is the default number of character\nparsed by the password input.",null,null],[17,"BUFF","","The `BUFF` and `STDIN_FILENO` const\nare default values for macros.",null,null],[17,"BUFF_READ_NUMBER","","",null,null],[17,"BUFF_READ_COMMAND","","",null,null],[17,"STDIN_FILENO","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",1,{"inputs":[{"name":"controlcharacter"}],"output":{"name":"controlcharacter"}}],[11,"clone","","",2,{"inputs":[{"name":"inputmodes"}],"output":{"name":"inputmodes"}}],[11,"clone","","",3,{"inputs":[{"name":"outputmodes"}],"output":{"name":"outputmodes"}}],[11,"clone","","",4,{"inputs":[{"name":"speed"}],"output":{"name":"speed"}}],[11,"clone","","",5,{"inputs":[{"name":"localmodes"}],"output":{"name":"localmodes"}}],[11,"clone","","",6,{"inputs":[{"name":"termioscontrol"}],"output":{"name":"termioscontrol"}}],[11,"clone","","",7,{"inputs":[{"name":"seek"}],"output":{"name":"seek"}}],[14,"write!","io","The `write` macro writes to output the text\nand returns the Some 0i32 or None according to success.",null,null],[14,"writeln!","","The `writeln` macro writes to output the text with a breakline\nand returns the Some 0i32 or None according to success.",null,null],[14,"write_number!","","The `write_number` macro writes to output the number\nand returns the Some 0i32 or None according to success.",null,null],[14,"writeln_number!","","The `writeln_number` macro writes to output the number with a breakline\nand returns the Some 0i32 or None according to success.",null,null],[14,"write_character!","","The `write_character` macro writes to output the character\nand returns the Some 0i32 or None according to success.",null,null],[14,"writeln_character!","","The `write_character` macro writes to output the character with a breakline\nand returns the Some 0i32 or None according to success.",null,null],[14,"write_err!","","The `write_error` macro writes to output the error\nand returns the Some 0i32 or None according to success.",null,null],[14,"writeln_err!","","The `writeln_error` macro writes to output the error\nand returns the Some 0i32 or None according to success.",null,null],[14,"read!","","The `read` macro reads the input and returns None\nor the Some of thetuple (len, text).",null,null],[14,"read_character!","","The `read_character` macro reads and\nreturns one character.",null,null],[14,"read_number!","","The `read_number` macro reads and\nreturns the number.",null,null],[14,"read_command!","","The `read_command` macro reads and\nreturns the concat of all letter.",null,null],[14,"ioctl!","","The `ioctl` macro reads the input and\nreturns None or a tuple (len, text).",null,null]],"paths":[[3,"Termios"],[4,"ControlCharacter"],[4,"InputModes"],[4,"OutputModes"],[4,"Speed"],[4,"LocalModes"],[4,"TermiosControl"],[4,"Seek"]]};
searchIndex['sig'] = {"items":[[0,"","sig","",null,null],[0,"ffi","","",null,null],[4,"Sig","sig::ffi","",null,null],[13,"HUP","","",0,null],[13,"INT","","",0,null],[13,"QUIT","","",0,null],[13,"ILL","","",0,null],[13,"TRAP","","",0,null],[13,"IOT","","",0,null],[13,"BUS","","",0,null],[13,"FPE","","",0,null],[13,"KILL","","",0,null],[13,"USR1","","",0,null],[13,"SEGV","","",0,null],[13,"USR2","","",0,null],[13,"PIPE","","",0,null],[13,"ALRM","","",0,null],[13,"TERM","","",0,null],[13,"STKFLT","","",0,null],[13,"CHLD","","",0,null],[13,"CONT","","",0,null],[13,"STOP","","",0,null],[13,"TSTP","","",0,null],[13,"TTIN","","",0,null],[13,"TTOU","","",0,null],[13,"URG","","",0,null],[13,"XCPU","","",0,null],[13,"XFS2","","",0,null],[13,"VTALRM","","",0,null],[13,"PROF","","",0,null],[13,"WINCH","","",0,null],[13,"POLL","","",0,null],[13,"PWR","","",0,null],[13,"SYS","","",0,null],[13,"RTMIN","","",0,null],[13,"RTMAX","","",0,null],[5,"signal","","",null,null],[5,"kill","","",null,null],[5,"getpid","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"sig"}],"output":{"name":"sig"}}],[14,"getpid!","sig","The `getpid` macro returns the PID of\nprogram.",null,null],[14,"signal!","","The `signal` macro receives a signal to\na PID program.",null,null],[14,"kill!","","The `signal` macro sends a signal to\na PID program.",null,null]],"paths":[[4,"Sig"]]};
searchIndex['shm'] = {"items":[[0,"","shm","",null,null],[0,"ffi","","",null,null],[3,"ShmidDs","shm::ffi","",null,null],[12,"shm_perm","","",0,null],[12,"shm_segsz","","",0,null],[12,"shm_atime","","",0,null],[12,"shm_dtime","","",0,null],[12,"shm_ctime","","",0,null],[12,"shm_cpid","","",0,null],[12,"shm_lpid","","",0,null],[12,"shm_nattch","","",0,null],[12,"shm_npages","","",0,null],[3,"IpcPerm","","",null,null],[12,"uid","","",1,null],[12,"gid","","",1,null],[12,"cuid","","",1,null],[12,"cgid","","",1,null],[12,"mode","","",1,null],[12,"seq","","",1,null],[12,"key","","",1,null],[4,"Shm","","The `Ipc` enum is a POSIX Standard\nfor System V.",null,null],[13,"READ","","",2,null],[13,"WRITE","","",2,null],[13,"RDONLY","","",2,null],[13,"REMAP","","",2,null],[13,"EXEC","","",2,null],[13,"LOCK","","",2,null],[13,"UNLOCK","","",2,null],[13,"STAT","","",2,null],[13,"INFO","","",2,null],[13,"DEST","","",2,null],[13,"LOCKED","","",2,null],[13,"HUGETLB","","",2,null],[4,"Ipc","","",null,null],[13,"CREAT","","",3,null],[13,"NOWAIT","","",3,null],[13,"EXCL","","",3,null],[13,"RMID","","",3,null],[13,"SET","","",3,null],[13,"STAT","","",3,null],[13,"INFO","","",3,null],[5,"ftok","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[17,"TOK_PATHNAME","","The `TOK_*, MSG_BUFF` const are default values\nfor macros.",null,null],[17,"TOK_PROJ_ID","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"shm"}],"output":{"name":"shm"}}],[11,"clone","","",3,{"inputs":[{"name":"ipc"}],"output":{"name":"ipc"}}],[14,"ftok!","shm","The `ftok` macro returns the System-V'IPC\nkey from pathname.",null,null],[14,"shmget!","","The `shmget` macro returns the id of\na memory segment.",null,null],[14,"shmget_id!","","The `shmget_id` returns and creates or gets\nthe memory segment.",null,null],[14,"shmat!","","The `shmat` macro returns the fist memory address.",null,null],[14,"shmdt!","","The `shmdt` macro detaches the shared memory\nfrom the memory address.",null,null],[14,"shmctl!","","The `shmctl` sets a information on the segment.",null,null]],"paths":[[3,"ShmidDs"],[3,"IpcPerm"],[4,"Shm"],[4,"Ipc"]]};
initSearch(searchIndex);
